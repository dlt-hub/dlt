
name: test common

on:
  pull_request:
    branches:
      - master
      - devel
  workflow_dispatch:

env:
  RUNTIME__LOG_LEVEL: ERROR

jobs:
  get_docs_changes:
    runs-on: ubuntu-latest
    outputs:
      changes_outside_docs: ${{ steps.check_changes.outputs.changes_outside_docs }}
      output1: ${{ steps.step1.outputs.test }}
      output2: abc

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: step1
        run: echo "test=hello" >> $GITHUB_OUTPUT

      - name: Check changes outside docs
        id: check_changes
        run: |
          echo "base.sha: ${{ github.event.pull_request.base.sha }}"
          echo "head.sha: ${{ github.event.pull_request.head.sha }}"
          changes_outside_docs=$(
            git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} \
              | grep -v '^docs/' || true
          )
          echo $changes_outside_docs
          if [ -z "$changes_outside_docs" ]; then
            echo "No changes outside docs. Skipping tests."
            echo "changes_outside_docs=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected outside docs."
            echo "changes_outside_docs=true" >> $GITHUB_OUTPUT
          fi
          echo "changes_outside_docs=true" >> $GITHUB_OUTPUT
      - name: Get changes_outside_docs
        run: echo "changes_outside_docs=${{ steps.check_changes.outputs.changes_outside_docs }}"
    # uses: ./.github/workflows/skip_docs_changes.yml

  run_common:
    name: Tests common dlt code
    needs: get_docs_changes
    # if: needs.get_docs_changes.outputs.changes_outside_docs == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}

    steps:
      - env:
          OUTPUT1: ${{needs.get_docs_changes.outputs.output1}}
          OUTPUT2: ${{needs.get_docs_changes.outputs.output2}}

        run: echo "$OUTPUT1 $OUTPUT2"

      - name: Print needs output
        run: echo "changes_outside_docs=${{ needs.get_docs_changes.outputs.changes_outside_docs }}"

      - name: Print all output
        run: echo "changes_outside_docs=${{ toJSON(needs.get_docs_changes.outputs) }}"

      - name: Check out
        uses: actions/checkout@master

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.10.x"

      - name: Install Poetry
        # https://github.com/snok/install-poetry#running-on-windows
        uses: snok/install-poetry@v1.3.2
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # - name: Get pip cache dir
      #   id: pip-cache
      #   run: |
      #     echo "::set-output name=dir::$(poetry env info -p)"
      #     echo "$(poetry env info -p)"

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          # path: ${{ steps.pip-cache.outputs.dir }}
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        # if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      # - name: Install self
      #   run: poetry install --no-interaction

      - run: |
          make test-common
        if: runner.os != 'Windows'
        name: Run tests Linux/MAC
      - run: |
          poetry run pytest tests/common tests/normalize tests/extract tests/pipeline tests/reflection -m "not forked"
        if: runner.os == 'Windows'
        name: Run tests Windows
        shell: cmd
